// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package internal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/pangud/pangud/internal/core/internal/biz"
)

func newEndpoint(db *gorm.DB, opts ...gen.DOOption) endpoint {
	_endpoint := endpoint{}

	_endpoint.endpointDo.UseDB(db, opts...)
	_endpoint.endpointDo.UseModel(&biz.Endpoint{})

	tableName := _endpoint.endpointDo.TableName()
	_endpoint.ALL = field.NewAsterisk(tableName)
	_endpoint.ID = field.NewUint32(tableName, "id")
	_endpoint.Name = field.NewString(tableName, "name")
	_endpoint.Addr = field.NewString(tableName, "addr")
	_endpoint.Token = field.NewString(tableName, "token")
	_endpoint.Type = field.NewUint8(tableName, "type")
	_endpoint.Status = field.NewUint8(tableName, "status")

	_endpoint.fillFieldMap()

	return _endpoint
}

type endpoint struct {
	endpointDo endpointDo

	ALL    field.Asterisk
	ID     field.Uint32
	Name   field.String
	Addr   field.String
	Token  field.String
	Type   field.Uint8
	Status field.Uint8

	fieldMap map[string]field.Expr
}

func (e endpoint) Table(newTableName string) *endpoint {
	e.endpointDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e endpoint) As(alias string) *endpoint {
	e.endpointDo.DO = *(e.endpointDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *endpoint) updateTableName(table string) *endpoint {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewUint32(table, "id")
	e.Name = field.NewString(table, "name")
	e.Addr = field.NewString(table, "addr")
	e.Token = field.NewString(table, "token")
	e.Type = field.NewUint8(table, "type")
	e.Status = field.NewUint8(table, "status")

	e.fillFieldMap()

	return e
}

func (e *endpoint) WithContext(ctx context.Context) *endpointDo { return e.endpointDo.WithContext(ctx) }

func (e endpoint) TableName() string { return e.endpointDo.TableName() }

func (e endpoint) Alias() string { return e.endpointDo.Alias() }

func (e *endpoint) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *endpoint) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 6)
	e.fieldMap["id"] = e.ID
	e.fieldMap["name"] = e.Name
	e.fieldMap["addr"] = e.Addr
	e.fieldMap["token"] = e.Token
	e.fieldMap["type"] = e.Type
	e.fieldMap["status"] = e.Status
}

func (e endpoint) clone(db *gorm.DB) endpoint {
	e.endpointDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e endpoint) replaceDB(db *gorm.DB) endpoint {
	e.endpointDo.ReplaceDB(db)
	return e
}

type endpointDo struct{ gen.DO }

func (e endpointDo) Debug() *endpointDo {
	return e.withDO(e.DO.Debug())
}

func (e endpointDo) WithContext(ctx context.Context) *endpointDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e endpointDo) ReadDB() *endpointDo {
	return e.Clauses(dbresolver.Read)
}

func (e endpointDo) WriteDB() *endpointDo {
	return e.Clauses(dbresolver.Write)
}

func (e endpointDo) Session(config *gorm.Session) *endpointDo {
	return e.withDO(e.DO.Session(config))
}

func (e endpointDo) Clauses(conds ...clause.Expression) *endpointDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e endpointDo) Returning(value interface{}, columns ...string) *endpointDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e endpointDo) Not(conds ...gen.Condition) *endpointDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e endpointDo) Or(conds ...gen.Condition) *endpointDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e endpointDo) Select(conds ...field.Expr) *endpointDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e endpointDo) Where(conds ...gen.Condition) *endpointDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e endpointDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *endpointDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e endpointDo) Order(conds ...field.Expr) *endpointDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e endpointDo) Distinct(cols ...field.Expr) *endpointDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e endpointDo) Omit(cols ...field.Expr) *endpointDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e endpointDo) Join(table schema.Tabler, on ...field.Expr) *endpointDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e endpointDo) LeftJoin(table schema.Tabler, on ...field.Expr) *endpointDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e endpointDo) RightJoin(table schema.Tabler, on ...field.Expr) *endpointDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e endpointDo) Group(cols ...field.Expr) *endpointDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e endpointDo) Having(conds ...gen.Condition) *endpointDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e endpointDo) Limit(limit int) *endpointDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e endpointDo) Offset(offset int) *endpointDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e endpointDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *endpointDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e endpointDo) Unscoped() *endpointDo {
	return e.withDO(e.DO.Unscoped())
}

func (e endpointDo) Create(values ...*biz.Endpoint) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e endpointDo) CreateInBatches(values []*biz.Endpoint, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e endpointDo) Save(values ...*biz.Endpoint) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e endpointDo) First() (*biz.Endpoint, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*biz.Endpoint), nil
	}
}

func (e endpointDo) Take() (*biz.Endpoint, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*biz.Endpoint), nil
	}
}

func (e endpointDo) Last() (*biz.Endpoint, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*biz.Endpoint), nil
	}
}

func (e endpointDo) Find() ([]*biz.Endpoint, error) {
	result, err := e.DO.Find()
	return result.([]*biz.Endpoint), err
}

func (e endpointDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*biz.Endpoint, err error) {
	buf := make([]*biz.Endpoint, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e endpointDo) FindInBatches(result *[]*biz.Endpoint, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e endpointDo) Attrs(attrs ...field.AssignExpr) *endpointDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e endpointDo) Assign(attrs ...field.AssignExpr) *endpointDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e endpointDo) Joins(fields ...field.RelationField) *endpointDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e endpointDo) Preload(fields ...field.RelationField) *endpointDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e endpointDo) FirstOrInit() (*biz.Endpoint, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*biz.Endpoint), nil
	}
}

func (e endpointDo) FirstOrCreate() (*biz.Endpoint, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*biz.Endpoint), nil
	}
}

func (e endpointDo) FindByPage(offset int, limit int) (result []*biz.Endpoint, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e endpointDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e endpointDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e endpointDo) Delete(models ...*biz.Endpoint) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *endpointDo) withDO(do gen.Dao) *endpointDo {
	e.DO = *do.(*gen.DO)
	return e
}
