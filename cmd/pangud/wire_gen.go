// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/gin-gonic/gin"
	"github.com/pangud/pangud/internal/conf"
	"github.com/pangud/pangud/internal/pkg/data"
	"github.com/pangud/pangud/internal/server"
	"github.com/pangud/pangud/internal/sslcert/biz"
	data2 "github.com/pangud/pangud/internal/sslcert/data"
	"github.com/pangud/pangud/internal/sslcert/resource"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func wireApp(cfg *conf.Bootstrap, engine *gin.Engine, logger *zap.Logger) (*App, func(), error) {
	dataData, cleanup, err := data.NewData(cfg, logger)
	if err != nil {
		return nil, nil, err
	}
	dnsProviderRepository := data2.NewDNSProviderRepository(dataData, logger)
	dnsProviderUsecase := biz.NewDNSProviderUsecase(dnsProviderRepository, logger)
	dnsProviderResource := resource.NewDNSProviderResource(logger, dnsProviderUsecase)
	sslCertAPI := resource.NewSSLCertPI(engine, dnsProviderResource)
	serverServer := server.NewServer(cfg, engine, sslCertAPI)
	app := newApp(dataData, serverServer, cfg, logger)
	return app, func() {
		cleanup()
	}, nil
}

// wire.go:

// App is the main application
type App struct {
	server *server.Server
	router *gin.Engine
	conf   *conf.Bootstrap
	data   *data.Data
	logger *zap.Logger
}

func (a *App) Run() {
	a.data.Migrate()
	a.server.Run()
}
