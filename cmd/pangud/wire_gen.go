// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/gin-gonic/gin"
	"go.uber.org/zap"
	"pangud.io/pangud/internal/account/biz"
	data2 "pangud.io/pangud/internal/account/data"
	"pangud.io/pangud/internal/account/resource"
	"pangud.io/pangud/internal/pkg/data"
	"pangud.io/pangud/internal/server"
	"pangud.io/pangud/pkg/conf"
)

// Injectors from wire.go:

func wireApp(cfg *conf.Bootstrap, engine *gin.Engine, logger *zap.Logger) (*App, func(), error) {
	dataData, cleanup, err := data.NewData(cfg, logger)
	if err != nil {
		return nil, nil, err
	}
	userRepository := data2.NewUserRepository(dataData, logger)
	userUsecase := biz.NewUserUsecase(userRepository, logger)
	userResource := resource.NewUserResource(logger, userUsecase)
	accountAPI := resource.NewAccountAPI(engine, userResource)
	serverServer := server.NewServer(cfg, engine, accountAPI)
	app := newApp(dataData, serverServer, cfg, logger)
	return app, func() {
		cleanup()
	}, nil
}

// wire.go:

// App is the main application
type App struct {
	server *server.Server
	router *gin.Engine
	conf   *conf.Bootstrap
	data   *data.Data
	logger *zap.Logger
}

func (a *App) Run() {
	a.data.Migrate()
	a.server.Run()
}
